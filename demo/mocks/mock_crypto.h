/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_CRYPTO_H
#define _MOCK_CRYPTO_H

#include "unity.h"
#include "crypto.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_crypto_Init(void);
void mock_crypto_Destroy(void);
void mock_crypto_Verify(void);




#define psa_crypto_init_IgnoreAndReturn(cmock_retval) psa_crypto_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_crypto_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_crypto_init_StopIgnore() psa_crypto_init_CMockStopIgnore()
void psa_crypto_init_CMockStopIgnore(void);
#define psa_crypto_init_ExpectAndReturn(cmock_retval) psa_crypto_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_crypto_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_crypto_init_CALLBACK)(int cmock_num_calls);
void psa_crypto_init_AddCallback(CMOCK_psa_crypto_init_CALLBACK Callback);
void psa_crypto_init_Stub(CMOCK_psa_crypto_init_CALLBACK Callback);
#define psa_crypto_init_StubWithCallback psa_crypto_init_Stub
#define psa_key_attributes_init_IgnoreAndReturn(cmock_retval) psa_key_attributes_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_attributes_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t cmock_to_return);
#define psa_key_attributes_init_StopIgnore() psa_key_attributes_init_CMockStopIgnore()
void psa_key_attributes_init_CMockStopIgnore(void);
#define psa_key_attributes_init_ExpectAndReturn(cmock_retval) psa_key_attributes_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_key_attributes_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t cmock_to_return);
typedef psa_key_attributes_t (* CMOCK_psa_key_attributes_init_CALLBACK)(int cmock_num_calls);
void psa_key_attributes_init_AddCallback(CMOCK_psa_key_attributes_init_CALLBACK Callback);
void psa_key_attributes_init_Stub(CMOCK_psa_key_attributes_init_CALLBACK Callback);
#define psa_key_attributes_init_StubWithCallback psa_key_attributes_init_Stub
#define psa_set_key_id_Ignore() psa_set_key_id_CMockIgnore()
void psa_set_key_id_CMockIgnore(void);
#define psa_set_key_id_StopIgnore() psa_set_key_id_CMockStopIgnore()
void psa_set_key_id_CMockStopIgnore(void);
#define psa_set_key_id_Expect(attributes, key) psa_set_key_id_CMockExpect(__LINE__, attributes, key)
void psa_set_key_id_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_id_t key);
typedef void (* CMOCK_psa_set_key_id_CALLBACK)(psa_key_attributes_t* attributes, psa_key_id_t key, int cmock_num_calls);
void psa_set_key_id_AddCallback(CMOCK_psa_set_key_id_CALLBACK Callback);
void psa_set_key_id_Stub(CMOCK_psa_set_key_id_CALLBACK Callback);
#define psa_set_key_id_StubWithCallback psa_set_key_id_Stub
#define psa_set_key_lifetime_Ignore() psa_set_key_lifetime_CMockIgnore()
void psa_set_key_lifetime_CMockIgnore(void);
#define psa_set_key_lifetime_StopIgnore() psa_set_key_lifetime_CMockStopIgnore()
void psa_set_key_lifetime_CMockStopIgnore(void);
#define psa_set_key_lifetime_Expect(attributes, lifetime) psa_set_key_lifetime_CMockExpect(__LINE__, attributes, lifetime)
void psa_set_key_lifetime_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_lifetime_t lifetime);
typedef void (* CMOCK_psa_set_key_lifetime_CALLBACK)(psa_key_attributes_t* attributes, psa_key_lifetime_t lifetime, int cmock_num_calls);
void psa_set_key_lifetime_AddCallback(CMOCK_psa_set_key_lifetime_CALLBACK Callback);
void psa_set_key_lifetime_Stub(CMOCK_psa_set_key_lifetime_CALLBACK Callback);
#define psa_set_key_lifetime_StubWithCallback psa_set_key_lifetime_Stub
#define psa_get_key_id_IgnoreAndReturn(cmock_retval) psa_get_key_id_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_id_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t cmock_to_return);
#define psa_get_key_id_StopIgnore() psa_get_key_id_CMockStopIgnore()
void psa_get_key_id_CMockStopIgnore(void);
#define psa_get_key_id_ExpectAndReturn(attributes, cmock_retval) psa_get_key_id_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_id_t cmock_to_return);
typedef psa_key_id_t (* CMOCK_psa_get_key_id_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_id_AddCallback(CMOCK_psa_get_key_id_CALLBACK Callback);
void psa_get_key_id_Stub(CMOCK_psa_get_key_id_CALLBACK Callback);
#define psa_get_key_id_StubWithCallback psa_get_key_id_Stub
#define psa_get_key_lifetime_IgnoreAndReturn(cmock_retval) psa_get_key_lifetime_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_lifetime_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_lifetime_t cmock_to_return);
#define psa_get_key_lifetime_StopIgnore() psa_get_key_lifetime_CMockStopIgnore()
void psa_get_key_lifetime_CMockStopIgnore(void);
#define psa_get_key_lifetime_ExpectAndReturn(attributes, cmock_retval) psa_get_key_lifetime_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_lifetime_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_lifetime_t cmock_to_return);
typedef psa_key_lifetime_t (* CMOCK_psa_get_key_lifetime_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_lifetime_AddCallback(CMOCK_psa_get_key_lifetime_CALLBACK Callback);
void psa_get_key_lifetime_Stub(CMOCK_psa_get_key_lifetime_CALLBACK Callback);
#define psa_get_key_lifetime_StubWithCallback psa_get_key_lifetime_Stub
#define psa_set_key_usage_flags_Ignore() psa_set_key_usage_flags_CMockIgnore()
void psa_set_key_usage_flags_CMockIgnore(void);
#define psa_set_key_usage_flags_StopIgnore() psa_set_key_usage_flags_CMockStopIgnore()
void psa_set_key_usage_flags_CMockStopIgnore(void);
#define psa_set_key_usage_flags_Expect(attributes, usage_flags) psa_set_key_usage_flags_CMockExpect(__LINE__, attributes, usage_flags)
void psa_set_key_usage_flags_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_usage_t usage_flags);
typedef void (* CMOCK_psa_set_key_usage_flags_CALLBACK)(psa_key_attributes_t* attributes, psa_key_usage_t usage_flags, int cmock_num_calls);
void psa_set_key_usage_flags_AddCallback(CMOCK_psa_set_key_usage_flags_CALLBACK Callback);
void psa_set_key_usage_flags_Stub(CMOCK_psa_set_key_usage_flags_CALLBACK Callback);
#define psa_set_key_usage_flags_StubWithCallback psa_set_key_usage_flags_Stub
#define psa_get_key_usage_flags_IgnoreAndReturn(cmock_retval) psa_get_key_usage_flags_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_usage_flags_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_usage_t cmock_to_return);
#define psa_get_key_usage_flags_StopIgnore() psa_get_key_usage_flags_CMockStopIgnore()
void psa_get_key_usage_flags_CMockStopIgnore(void);
#define psa_get_key_usage_flags_ExpectAndReturn(attributes, cmock_retval) psa_get_key_usage_flags_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_usage_flags_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_usage_t cmock_to_return);
typedef psa_key_usage_t (* CMOCK_psa_get_key_usage_flags_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_usage_flags_AddCallback(CMOCK_psa_get_key_usage_flags_CALLBACK Callback);
void psa_get_key_usage_flags_Stub(CMOCK_psa_get_key_usage_flags_CALLBACK Callback);
#define psa_get_key_usage_flags_StubWithCallback psa_get_key_usage_flags_Stub
#define psa_set_key_algorithm_Ignore() psa_set_key_algorithm_CMockIgnore()
void psa_set_key_algorithm_CMockIgnore(void);
#define psa_set_key_algorithm_StopIgnore() psa_set_key_algorithm_CMockStopIgnore()
void psa_set_key_algorithm_CMockStopIgnore(void);
#define psa_set_key_algorithm_Expect(attributes, alg) psa_set_key_algorithm_CMockExpect(__LINE__, attributes, alg)
void psa_set_key_algorithm_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_algorithm_t alg);
typedef void (* CMOCK_psa_set_key_algorithm_CALLBACK)(psa_key_attributes_t* attributes, psa_algorithm_t alg, int cmock_num_calls);
void psa_set_key_algorithm_AddCallback(CMOCK_psa_set_key_algorithm_CALLBACK Callback);
void psa_set_key_algorithm_Stub(CMOCK_psa_set_key_algorithm_CALLBACK Callback);
#define psa_set_key_algorithm_StubWithCallback psa_set_key_algorithm_Stub
#define psa_get_key_algorithm_IgnoreAndReturn(cmock_retval) psa_get_key_algorithm_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_algorithm_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t cmock_to_return);
#define psa_get_key_algorithm_StopIgnore() psa_get_key_algorithm_CMockStopIgnore()
void psa_get_key_algorithm_CMockStopIgnore(void);
#define psa_get_key_algorithm_ExpectAndReturn(attributes, cmock_retval) psa_get_key_algorithm_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_algorithm_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_algorithm_t cmock_to_return);
typedef psa_algorithm_t (* CMOCK_psa_get_key_algorithm_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_algorithm_AddCallback(CMOCK_psa_get_key_algorithm_CALLBACK Callback);
void psa_get_key_algorithm_Stub(CMOCK_psa_get_key_algorithm_CALLBACK Callback);
#define psa_get_key_algorithm_StubWithCallback psa_get_key_algorithm_Stub
#define psa_set_key_type_Ignore() psa_set_key_type_CMockIgnore()
void psa_set_key_type_CMockIgnore(void);
#define psa_set_key_type_StopIgnore() psa_set_key_type_CMockStopIgnore()
void psa_set_key_type_CMockStopIgnore(void);
#define psa_set_key_type_Expect(attributes, type) psa_set_key_type_CMockExpect(__LINE__, attributes, type)
void psa_set_key_type_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_type_t type);
typedef void (* CMOCK_psa_set_key_type_CALLBACK)(psa_key_attributes_t* attributes, psa_key_type_t type, int cmock_num_calls);
void psa_set_key_type_AddCallback(CMOCK_psa_set_key_type_CALLBACK Callback);
void psa_set_key_type_Stub(CMOCK_psa_set_key_type_CALLBACK Callback);
#define psa_set_key_type_StubWithCallback psa_set_key_type_Stub
#define psa_set_key_bits_Ignore() psa_set_key_bits_CMockIgnore()
void psa_set_key_bits_CMockIgnore(void);
#define psa_set_key_bits_StopIgnore() psa_set_key_bits_CMockStopIgnore()
void psa_set_key_bits_CMockStopIgnore(void);
#define psa_set_key_bits_Expect(attributes, bits) psa_set_key_bits_CMockExpect(__LINE__, attributes, bits)
void psa_set_key_bits_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, size_t bits);
typedef void (* CMOCK_psa_set_key_bits_CALLBACK)(psa_key_attributes_t* attributes, size_t bits, int cmock_num_calls);
void psa_set_key_bits_AddCallback(CMOCK_psa_set_key_bits_CALLBACK Callback);
void psa_set_key_bits_Stub(CMOCK_psa_set_key_bits_CALLBACK Callback);
#define psa_set_key_bits_StubWithCallback psa_set_key_bits_Stub
#define psa_get_key_type_IgnoreAndReturn(cmock_retval) psa_get_key_type_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_type_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_type_t cmock_to_return);
#define psa_get_key_type_StopIgnore() psa_get_key_type_CMockStopIgnore()
void psa_get_key_type_CMockStopIgnore(void);
#define psa_get_key_type_ExpectAndReturn(attributes, cmock_retval) psa_get_key_type_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_type_t cmock_to_return);
typedef psa_key_type_t (* CMOCK_psa_get_key_type_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_type_AddCallback(CMOCK_psa_get_key_type_CALLBACK Callback);
void psa_get_key_type_Stub(CMOCK_psa_get_key_type_CALLBACK Callback);
#define psa_get_key_type_StubWithCallback psa_get_key_type_Stub
#define psa_get_key_bits_IgnoreAndReturn(cmock_retval) psa_get_key_bits_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_bits_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, size_t cmock_to_return);
#define psa_get_key_bits_StopIgnore() psa_get_key_bits_CMockStopIgnore()
void psa_get_key_bits_CMockStopIgnore(void);
#define psa_get_key_bits_ExpectAndReturn(attributes, cmock_retval) psa_get_key_bits_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_bits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, size_t cmock_to_return);
typedef size_t (* CMOCK_psa_get_key_bits_CALLBACK)(const psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_bits_AddCallback(CMOCK_psa_get_key_bits_CALLBACK Callback);
void psa_get_key_bits_Stub(CMOCK_psa_get_key_bits_CALLBACK Callback);
#define psa_get_key_bits_StubWithCallback psa_get_key_bits_Stub
#define psa_get_key_attributes_IgnoreAndReturn(cmock_retval) psa_get_key_attributes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_get_key_attributes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_get_key_attributes_StopIgnore() psa_get_key_attributes_CMockStopIgnore()
void psa_get_key_attributes_CMockStopIgnore(void);
#define psa_get_key_attributes_ExpectAndReturn(key, attributes, cmock_retval) psa_get_key_attributes_CMockExpectAndReturn(__LINE__, key, attributes, cmock_retval)
void psa_get_key_attributes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_key_attributes_t* attributes, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_get_key_attributes_CALLBACK)(psa_key_id_t key, psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_get_key_attributes_AddCallback(CMOCK_psa_get_key_attributes_CALLBACK Callback);
void psa_get_key_attributes_Stub(CMOCK_psa_get_key_attributes_CALLBACK Callback);
#define psa_get_key_attributes_StubWithCallback psa_get_key_attributes_Stub
#define psa_reset_key_attributes_Ignore() psa_reset_key_attributes_CMockIgnore()
void psa_reset_key_attributes_CMockIgnore(void);
#define psa_reset_key_attributes_StopIgnore() psa_reset_key_attributes_CMockStopIgnore()
void psa_reset_key_attributes_CMockStopIgnore(void);
#define psa_reset_key_attributes_Expect(attributes) psa_reset_key_attributes_CMockExpect(__LINE__, attributes)
void psa_reset_key_attributes_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes);
typedef void (* CMOCK_psa_reset_key_attributes_CALLBACK)(psa_key_attributes_t* attributes, int cmock_num_calls);
void psa_reset_key_attributes_AddCallback(CMOCK_psa_reset_key_attributes_CALLBACK Callback);
void psa_reset_key_attributes_Stub(CMOCK_psa_reset_key_attributes_CALLBACK Callback);
#define psa_reset_key_attributes_StubWithCallback psa_reset_key_attributes_Stub
#define psa_purge_key_IgnoreAndReturn(cmock_retval) psa_purge_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_purge_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_purge_key_StopIgnore() psa_purge_key_CMockStopIgnore()
void psa_purge_key_CMockStopIgnore(void);
#define psa_purge_key_ExpectAndReturn(key, cmock_retval) psa_purge_key_CMockExpectAndReturn(__LINE__, key, cmock_retval)
void psa_purge_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_purge_key_CALLBACK)(psa_key_id_t key, int cmock_num_calls);
void psa_purge_key_AddCallback(CMOCK_psa_purge_key_CALLBACK Callback);
void psa_purge_key_Stub(CMOCK_psa_purge_key_CALLBACK Callback);
#define psa_purge_key_StubWithCallback psa_purge_key_Stub
#define psa_copy_key_IgnoreAndReturn(cmock_retval) psa_copy_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_copy_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_copy_key_StopIgnore() psa_copy_key_CMockStopIgnore()
void psa_copy_key_CMockStopIgnore(void);
#define psa_copy_key_ExpectAndReturn(source_key, attributes, target_key, cmock_retval) psa_copy_key_CMockExpectAndReturn(__LINE__, source_key, attributes, target_key, cmock_retval)
void psa_copy_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t source_key, const psa_key_attributes_t* attributes, psa_key_id_t* target_key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_copy_key_CALLBACK)(psa_key_id_t source_key, const psa_key_attributes_t* attributes, psa_key_id_t* target_key, int cmock_num_calls);
void psa_copy_key_AddCallback(CMOCK_psa_copy_key_CALLBACK Callback);
void psa_copy_key_Stub(CMOCK_psa_copy_key_CALLBACK Callback);
#define psa_copy_key_StubWithCallback psa_copy_key_Stub
#define psa_destroy_key_IgnoreAndReturn(cmock_retval) psa_destroy_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_destroy_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_destroy_key_StopIgnore() psa_destroy_key_CMockStopIgnore()
void psa_destroy_key_CMockStopIgnore(void);
#define psa_destroy_key_ExpectAndReturn(key, cmock_retval) psa_destroy_key_CMockExpectAndReturn(__LINE__, key, cmock_retval)
void psa_destroy_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_destroy_key_CALLBACK)(psa_key_id_t key, int cmock_num_calls);
void psa_destroy_key_AddCallback(CMOCK_psa_destroy_key_CALLBACK Callback);
void psa_destroy_key_Stub(CMOCK_psa_destroy_key_CALLBACK Callback);
#define psa_destroy_key_StubWithCallback psa_destroy_key_Stub
#define psa_import_key_IgnoreAndReturn(cmock_retval) psa_import_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_import_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_import_key_StopIgnore() psa_import_key_CMockStopIgnore()
void psa_import_key_CMockStopIgnore(void);
#define psa_import_key_ExpectAndReturn(attributes, data, data_length, key, cmock_retval) psa_import_key_CMockExpectAndReturn(__LINE__, attributes, data, data_length, key, cmock_retval)
void psa_import_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, const uint8_t* data, size_t data_length, psa_key_id_t* key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_import_key_CALLBACK)(const psa_key_attributes_t* attributes, const uint8_t* data, size_t data_length, psa_key_id_t* key, int cmock_num_calls);
void psa_import_key_AddCallback(CMOCK_psa_import_key_CALLBACK Callback);
void psa_import_key_Stub(CMOCK_psa_import_key_CALLBACK Callback);
#define psa_import_key_StubWithCallback psa_import_key_Stub
#define psa_export_key_IgnoreAndReturn(cmock_retval) psa_export_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_export_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_export_key_StopIgnore() psa_export_key_CMockStopIgnore()
void psa_export_key_CMockStopIgnore(void);
#define psa_export_key_ExpectAndReturn(key, data, data_size, data_length, cmock_retval) psa_export_key_CMockExpectAndReturn(__LINE__, key, data, data_size, data_length, cmock_retval)
void psa_export_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_export_key_CALLBACK)(psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, int cmock_num_calls);
void psa_export_key_AddCallback(CMOCK_psa_export_key_CALLBACK Callback);
void psa_export_key_Stub(CMOCK_psa_export_key_CALLBACK Callback);
#define psa_export_key_StubWithCallback psa_export_key_Stub
#define psa_export_public_key_IgnoreAndReturn(cmock_retval) psa_export_public_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_export_public_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_export_public_key_StopIgnore() psa_export_public_key_CMockStopIgnore()
void psa_export_public_key_CMockStopIgnore(void);
#define psa_export_public_key_ExpectAndReturn(key, data, data_size, data_length, cmock_retval) psa_export_public_key_CMockExpectAndReturn(__LINE__, key, data, data_size, data_length, cmock_retval)
void psa_export_public_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_export_public_key_CALLBACK)(psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, int cmock_num_calls);
void psa_export_public_key_AddCallback(CMOCK_psa_export_public_key_CALLBACK Callback);
void psa_export_public_key_Stub(CMOCK_psa_export_public_key_CALLBACK Callback);
#define psa_export_public_key_StubWithCallback psa_export_public_key_Stub
#define psa_hash_compute_IgnoreAndReturn(cmock_retval) psa_hash_compute_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_compute_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_compute_StopIgnore() psa_hash_compute_CMockStopIgnore()
void psa_hash_compute_CMockStopIgnore(void);
#define psa_hash_compute_ExpectAndReturn(alg, input, input_length, hash, hash_size, hash_length, cmock_retval) psa_hash_compute_CMockExpectAndReturn(__LINE__, alg, input, input_length, hash, hash_size, hash_length, cmock_retval)
void psa_hash_compute_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* hash, size_t hash_size, size_t* hash_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_compute_CALLBACK)(psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* hash, size_t hash_size, size_t* hash_length, int cmock_num_calls);
void psa_hash_compute_AddCallback(CMOCK_psa_hash_compute_CALLBACK Callback);
void psa_hash_compute_Stub(CMOCK_psa_hash_compute_CALLBACK Callback);
#define psa_hash_compute_StubWithCallback psa_hash_compute_Stub
#define psa_hash_compare_IgnoreAndReturn(cmock_retval) psa_hash_compare_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_compare_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_compare_StopIgnore() psa_hash_compare_CMockStopIgnore()
void psa_hash_compare_CMockStopIgnore(void);
#define psa_hash_compare_ExpectAndReturn(alg, input, input_length, hash, hash_length, cmock_retval) psa_hash_compare_CMockExpectAndReturn(__LINE__, alg, input, input_length, hash, hash_length, cmock_retval)
void psa_hash_compare_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* hash, size_t hash_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_compare_CALLBACK)(psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* hash, size_t hash_length, int cmock_num_calls);
void psa_hash_compare_AddCallback(CMOCK_psa_hash_compare_CALLBACK Callback);
void psa_hash_compare_Stub(CMOCK_psa_hash_compare_CALLBACK Callback);
#define psa_hash_compare_StubWithCallback psa_hash_compare_Stub
#define psa_hash_operation_init_IgnoreAndReturn(cmock_retval) psa_hash_operation_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_operation_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t cmock_to_return);
#define psa_hash_operation_init_StopIgnore() psa_hash_operation_init_CMockStopIgnore()
void psa_hash_operation_init_CMockStopIgnore(void);
#define psa_hash_operation_init_ExpectAndReturn(cmock_retval) psa_hash_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_hash_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t cmock_to_return);
typedef psa_hash_operation_t (* CMOCK_psa_hash_operation_init_CALLBACK)(int cmock_num_calls);
void psa_hash_operation_init_AddCallback(CMOCK_psa_hash_operation_init_CALLBACK Callback);
void psa_hash_operation_init_Stub(CMOCK_psa_hash_operation_init_CALLBACK Callback);
#define psa_hash_operation_init_StubWithCallback psa_hash_operation_init_Stub
#define psa_hash_setup_IgnoreAndReturn(cmock_retval) psa_hash_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_setup_StopIgnore() psa_hash_setup_CMockStopIgnore()
void psa_hash_setup_CMockStopIgnore(void);
#define psa_hash_setup_ExpectAndReturn(operation, alg, cmock_retval) psa_hash_setup_CMockExpectAndReturn(__LINE__, operation, alg, cmock_retval)
void psa_hash_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_setup_CALLBACK)(psa_hash_operation_t* operation, psa_algorithm_t alg, int cmock_num_calls);
void psa_hash_setup_AddCallback(CMOCK_psa_hash_setup_CALLBACK Callback);
void psa_hash_setup_Stub(CMOCK_psa_hash_setup_CALLBACK Callback);
#define psa_hash_setup_StubWithCallback psa_hash_setup_Stub
#define psa_hash_update_IgnoreAndReturn(cmock_retval) psa_hash_update_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_update_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_update_StopIgnore() psa_hash_update_CMockStopIgnore()
void psa_hash_update_CMockStopIgnore(void);
#define psa_hash_update_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_hash_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_hash_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_update_CALLBACK)(psa_hash_operation_t* operation, const uint8_t* input, size_t input_length, int cmock_num_calls);
void psa_hash_update_AddCallback(CMOCK_psa_hash_update_CALLBACK Callback);
void psa_hash_update_Stub(CMOCK_psa_hash_update_CALLBACK Callback);
#define psa_hash_update_StubWithCallback psa_hash_update_Stub
#define psa_hash_finish_IgnoreAndReturn(cmock_retval) psa_hash_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_finish_StopIgnore() psa_hash_finish_CMockStopIgnore()
void psa_hash_finish_CMockStopIgnore(void);
#define psa_hash_finish_ExpectAndReturn(operation, hash, hash_size, hash_length, cmock_retval) psa_hash_finish_CMockExpectAndReturn(__LINE__, operation, hash, hash_size, hash_length, cmock_retval)
void psa_hash_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, uint8_t* hash, size_t hash_size, size_t* hash_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_finish_CALLBACK)(psa_hash_operation_t* operation, uint8_t* hash, size_t hash_size, size_t* hash_length, int cmock_num_calls);
void psa_hash_finish_AddCallback(CMOCK_psa_hash_finish_CALLBACK Callback);
void psa_hash_finish_Stub(CMOCK_psa_hash_finish_CALLBACK Callback);
#define psa_hash_finish_StubWithCallback psa_hash_finish_Stub
#define psa_hash_verify_IgnoreAndReturn(cmock_retval) psa_hash_verify_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_verify_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_verify_StopIgnore() psa_hash_verify_CMockStopIgnore()
void psa_hash_verify_CMockStopIgnore(void);
#define psa_hash_verify_ExpectAndReturn(operation, hash, hash_length, cmock_retval) psa_hash_verify_CMockExpectAndReturn(__LINE__, operation, hash, hash_length, cmock_retval)
void psa_hash_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, const uint8_t* hash, size_t hash_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_verify_CALLBACK)(psa_hash_operation_t* operation, const uint8_t* hash, size_t hash_length, int cmock_num_calls);
void psa_hash_verify_AddCallback(CMOCK_psa_hash_verify_CALLBACK Callback);
void psa_hash_verify_Stub(CMOCK_psa_hash_verify_CALLBACK Callback);
#define psa_hash_verify_StubWithCallback psa_hash_verify_Stub
#define psa_hash_abort_IgnoreAndReturn(cmock_retval) psa_hash_abort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_abort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_abort_StopIgnore() psa_hash_abort_CMockStopIgnore()
void psa_hash_abort_CMockStopIgnore(void);
#define psa_hash_abort_ExpectAndReturn(operation, cmock_retval) psa_hash_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_hash_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_abort_CALLBACK)(psa_hash_operation_t* operation, int cmock_num_calls);
void psa_hash_abort_AddCallback(CMOCK_psa_hash_abort_CALLBACK Callback);
void psa_hash_abort_Stub(CMOCK_psa_hash_abort_CALLBACK Callback);
#define psa_hash_abort_StubWithCallback psa_hash_abort_Stub
#define psa_hash_clone_IgnoreAndReturn(cmock_retval) psa_hash_clone_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_hash_clone_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_hash_clone_StopIgnore() psa_hash_clone_CMockStopIgnore()
void psa_hash_clone_CMockStopIgnore(void);
#define psa_hash_clone_ExpectAndReturn(source_operation, target_operation, cmock_retval) psa_hash_clone_CMockExpectAndReturn(__LINE__, source_operation, target_operation, cmock_retval)
void psa_hash_clone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_hash_operation_t* source_operation, psa_hash_operation_t* target_operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_hash_clone_CALLBACK)(const psa_hash_operation_t* source_operation, psa_hash_operation_t* target_operation, int cmock_num_calls);
void psa_hash_clone_AddCallback(CMOCK_psa_hash_clone_CALLBACK Callback);
void psa_hash_clone_Stub(CMOCK_psa_hash_clone_CALLBACK Callback);
#define psa_hash_clone_StubWithCallback psa_hash_clone_Stub
#define psa_mac_compute_IgnoreAndReturn(cmock_retval) psa_mac_compute_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_compute_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_compute_StopIgnore() psa_mac_compute_CMockStopIgnore()
void psa_mac_compute_CMockStopIgnore(void);
#define psa_mac_compute_ExpectAndReturn(key, alg, input, input_length, mac, mac_size, mac_length, cmock_retval) psa_mac_compute_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, mac, mac_size, mac_length, cmock_retval)
void psa_mac_compute_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* mac, size_t mac_size, size_t* mac_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_compute_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* mac, size_t mac_size, size_t* mac_length, int cmock_num_calls);
void psa_mac_compute_AddCallback(CMOCK_psa_mac_compute_CALLBACK Callback);
void psa_mac_compute_Stub(CMOCK_psa_mac_compute_CALLBACK Callback);
#define psa_mac_compute_StubWithCallback psa_mac_compute_Stub
#define psa_mac_verify_IgnoreAndReturn(cmock_retval) psa_mac_verify_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_verify_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_verify_StopIgnore() psa_mac_verify_CMockStopIgnore()
void psa_mac_verify_CMockStopIgnore(void);
#define psa_mac_verify_ExpectAndReturn(key, alg, input, input_length, mac, mac_length, cmock_retval) psa_mac_verify_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, mac, mac_length, cmock_retval)
void psa_mac_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* mac, size_t mac_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_verify_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* mac, size_t mac_length, int cmock_num_calls);
void psa_mac_verify_AddCallback(CMOCK_psa_mac_verify_CALLBACK Callback);
void psa_mac_verify_Stub(CMOCK_psa_mac_verify_CALLBACK Callback);
#define psa_mac_verify_StubWithCallback psa_mac_verify_Stub
#define psa_mac_operation_init_IgnoreAndReturn(cmock_retval) psa_mac_operation_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_operation_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t cmock_to_return);
#define psa_mac_operation_init_StopIgnore() psa_mac_operation_init_CMockStopIgnore()
void psa_mac_operation_init_CMockStopIgnore(void);
#define psa_mac_operation_init_ExpectAndReturn(cmock_retval) psa_mac_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_mac_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t cmock_to_return);
typedef psa_mac_operation_t (* CMOCK_psa_mac_operation_init_CALLBACK)(int cmock_num_calls);
void psa_mac_operation_init_AddCallback(CMOCK_psa_mac_operation_init_CALLBACK Callback);
void psa_mac_operation_init_Stub(CMOCK_psa_mac_operation_init_CALLBACK Callback);
#define psa_mac_operation_init_StubWithCallback psa_mac_operation_init_Stub
#define psa_mac_sign_setup_IgnoreAndReturn(cmock_retval) psa_mac_sign_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_sign_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_sign_setup_StopIgnore() psa_mac_sign_setup_CMockStopIgnore()
void psa_mac_sign_setup_CMockStopIgnore(void);
#define psa_mac_sign_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_mac_sign_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_mac_sign_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_sign_setup_CALLBACK)(psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_mac_sign_setup_AddCallback(CMOCK_psa_mac_sign_setup_CALLBACK Callback);
void psa_mac_sign_setup_Stub(CMOCK_psa_mac_sign_setup_CALLBACK Callback);
#define psa_mac_sign_setup_StubWithCallback psa_mac_sign_setup_Stub
#define psa_mac_verify_setup_IgnoreAndReturn(cmock_retval) psa_mac_verify_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_verify_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_verify_setup_StopIgnore() psa_mac_verify_setup_CMockStopIgnore()
void psa_mac_verify_setup_CMockStopIgnore(void);
#define psa_mac_verify_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_mac_verify_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_mac_verify_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_verify_setup_CALLBACK)(psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_mac_verify_setup_AddCallback(CMOCK_psa_mac_verify_setup_CALLBACK Callback);
void psa_mac_verify_setup_Stub(CMOCK_psa_mac_verify_setup_CALLBACK Callback);
#define psa_mac_verify_setup_StubWithCallback psa_mac_verify_setup_Stub
#define psa_mac_update_IgnoreAndReturn(cmock_retval) psa_mac_update_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_update_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_update_StopIgnore() psa_mac_update_CMockStopIgnore()
void psa_mac_update_CMockStopIgnore(void);
#define psa_mac_update_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_mac_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_mac_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_update_CALLBACK)(psa_mac_operation_t* operation, const uint8_t* input, size_t input_length, int cmock_num_calls);
void psa_mac_update_AddCallback(CMOCK_psa_mac_update_CALLBACK Callback);
void psa_mac_update_Stub(CMOCK_psa_mac_update_CALLBACK Callback);
#define psa_mac_update_StubWithCallback psa_mac_update_Stub
#define psa_mac_sign_finish_IgnoreAndReturn(cmock_retval) psa_mac_sign_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_sign_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_sign_finish_StopIgnore() psa_mac_sign_finish_CMockStopIgnore()
void psa_mac_sign_finish_CMockStopIgnore(void);
#define psa_mac_sign_finish_ExpectAndReturn(operation, mac, mac_size, mac_length, cmock_retval) psa_mac_sign_finish_CMockExpectAndReturn(__LINE__, operation, mac, mac_size, mac_length, cmock_retval)
void psa_mac_sign_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, uint8_t* mac, size_t mac_size, size_t* mac_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_sign_finish_CALLBACK)(psa_mac_operation_t* operation, uint8_t* mac, size_t mac_size, size_t* mac_length, int cmock_num_calls);
void psa_mac_sign_finish_AddCallback(CMOCK_psa_mac_sign_finish_CALLBACK Callback);
void psa_mac_sign_finish_Stub(CMOCK_psa_mac_sign_finish_CALLBACK Callback);
#define psa_mac_sign_finish_StubWithCallback psa_mac_sign_finish_Stub
#define psa_mac_verify_finish_IgnoreAndReturn(cmock_retval) psa_mac_verify_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_verify_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_verify_finish_StopIgnore() psa_mac_verify_finish_CMockStopIgnore()
void psa_mac_verify_finish_CMockStopIgnore(void);
#define psa_mac_verify_finish_ExpectAndReturn(operation, mac, mac_length, cmock_retval) psa_mac_verify_finish_CMockExpectAndReturn(__LINE__, operation, mac, mac_length, cmock_retval)
void psa_mac_verify_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, const uint8_t* mac, size_t mac_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_verify_finish_CALLBACK)(psa_mac_operation_t* operation, const uint8_t* mac, size_t mac_length, int cmock_num_calls);
void psa_mac_verify_finish_AddCallback(CMOCK_psa_mac_verify_finish_CALLBACK Callback);
void psa_mac_verify_finish_Stub(CMOCK_psa_mac_verify_finish_CALLBACK Callback);
#define psa_mac_verify_finish_StubWithCallback psa_mac_verify_finish_Stub
#define psa_mac_abort_IgnoreAndReturn(cmock_retval) psa_mac_abort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_mac_abort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_mac_abort_StopIgnore() psa_mac_abort_CMockStopIgnore()
void psa_mac_abort_CMockStopIgnore(void);
#define psa_mac_abort_ExpectAndReturn(operation, cmock_retval) psa_mac_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_mac_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_mac_abort_CALLBACK)(psa_mac_operation_t* operation, int cmock_num_calls);
void psa_mac_abort_AddCallback(CMOCK_psa_mac_abort_CALLBACK Callback);
void psa_mac_abort_Stub(CMOCK_psa_mac_abort_CALLBACK Callback);
#define psa_mac_abort_StubWithCallback psa_mac_abort_Stub
#define psa_cipher_encrypt_IgnoreAndReturn(cmock_retval) psa_cipher_encrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_encrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_encrypt_StopIgnore() psa_cipher_encrypt_CMockStopIgnore()
void psa_cipher_encrypt_CMockStopIgnore(void);
#define psa_cipher_encrypt_ExpectAndReturn(key, alg, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_encrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_encrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_cipher_encrypt_AddCallback(CMOCK_psa_cipher_encrypt_CALLBACK Callback);
void psa_cipher_encrypt_Stub(CMOCK_psa_cipher_encrypt_CALLBACK Callback);
#define psa_cipher_encrypt_StubWithCallback psa_cipher_encrypt_Stub
#define psa_cipher_decrypt_IgnoreAndReturn(cmock_retval) psa_cipher_decrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_decrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_decrypt_StopIgnore() psa_cipher_decrypt_CMockStopIgnore()
void psa_cipher_decrypt_CMockStopIgnore(void);
#define psa_cipher_decrypt_ExpectAndReturn(key, alg, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_decrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_decrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_cipher_decrypt_AddCallback(CMOCK_psa_cipher_decrypt_CALLBACK Callback);
void psa_cipher_decrypt_Stub(CMOCK_psa_cipher_decrypt_CALLBACK Callback);
#define psa_cipher_decrypt_StubWithCallback psa_cipher_decrypt_Stub
#define psa_cipher_operation_init_IgnoreAndReturn(cmock_retval) psa_cipher_operation_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_operation_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t cmock_to_return);
#define psa_cipher_operation_init_StopIgnore() psa_cipher_operation_init_CMockStopIgnore()
void psa_cipher_operation_init_CMockStopIgnore(void);
#define psa_cipher_operation_init_ExpectAndReturn(cmock_retval) psa_cipher_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_cipher_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t cmock_to_return);
typedef psa_cipher_operation_t (* CMOCK_psa_cipher_operation_init_CALLBACK)(int cmock_num_calls);
void psa_cipher_operation_init_AddCallback(CMOCK_psa_cipher_operation_init_CALLBACK Callback);
void psa_cipher_operation_init_Stub(CMOCK_psa_cipher_operation_init_CALLBACK Callback);
#define psa_cipher_operation_init_StubWithCallback psa_cipher_operation_init_Stub
#define psa_cipher_encrypt_setup_IgnoreAndReturn(cmock_retval) psa_cipher_encrypt_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_encrypt_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_encrypt_setup_StopIgnore() psa_cipher_encrypt_setup_CMockStopIgnore()
void psa_cipher_encrypt_setup_CMockStopIgnore(void);
#define psa_cipher_encrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_cipher_encrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_cipher_encrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_encrypt_setup_CALLBACK)(psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_cipher_encrypt_setup_AddCallback(CMOCK_psa_cipher_encrypt_setup_CALLBACK Callback);
void psa_cipher_encrypt_setup_Stub(CMOCK_psa_cipher_encrypt_setup_CALLBACK Callback);
#define psa_cipher_encrypt_setup_StubWithCallback psa_cipher_encrypt_setup_Stub
#define psa_cipher_decrypt_setup_IgnoreAndReturn(cmock_retval) psa_cipher_decrypt_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_decrypt_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_decrypt_setup_StopIgnore() psa_cipher_decrypt_setup_CMockStopIgnore()
void psa_cipher_decrypt_setup_CMockStopIgnore(void);
#define psa_cipher_decrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_cipher_decrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_cipher_decrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_decrypt_setup_CALLBACK)(psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_cipher_decrypt_setup_AddCallback(CMOCK_psa_cipher_decrypt_setup_CALLBACK Callback);
void psa_cipher_decrypt_setup_Stub(CMOCK_psa_cipher_decrypt_setup_CALLBACK Callback);
#define psa_cipher_decrypt_setup_StubWithCallback psa_cipher_decrypt_setup_Stub
#define psa_cipher_generate_iv_IgnoreAndReturn(cmock_retval) psa_cipher_generate_iv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_generate_iv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_generate_iv_StopIgnore() psa_cipher_generate_iv_CMockStopIgnore()
void psa_cipher_generate_iv_CMockStopIgnore(void);
#define psa_cipher_generate_iv_ExpectAndReturn(operation, iv, iv_size, iv_length, cmock_retval) psa_cipher_generate_iv_CMockExpectAndReturn(__LINE__, operation, iv, iv_size, iv_length, cmock_retval)
void psa_cipher_generate_iv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, uint8_t* iv, size_t iv_size, size_t* iv_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_generate_iv_CALLBACK)(psa_cipher_operation_t* operation, uint8_t* iv, size_t iv_size, size_t* iv_length, int cmock_num_calls);
void psa_cipher_generate_iv_AddCallback(CMOCK_psa_cipher_generate_iv_CALLBACK Callback);
void psa_cipher_generate_iv_Stub(CMOCK_psa_cipher_generate_iv_CALLBACK Callback);
#define psa_cipher_generate_iv_StubWithCallback psa_cipher_generate_iv_Stub
#define psa_cipher_set_iv_IgnoreAndReturn(cmock_retval) psa_cipher_set_iv_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_set_iv_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_set_iv_StopIgnore() psa_cipher_set_iv_CMockStopIgnore()
void psa_cipher_set_iv_CMockStopIgnore(void);
#define psa_cipher_set_iv_ExpectAndReturn(operation, iv, iv_length, cmock_retval) psa_cipher_set_iv_CMockExpectAndReturn(__LINE__, operation, iv, iv_length, cmock_retval)
void psa_cipher_set_iv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, const uint8_t* iv, size_t iv_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_set_iv_CALLBACK)(psa_cipher_operation_t* operation, const uint8_t* iv, size_t iv_length, int cmock_num_calls);
void psa_cipher_set_iv_AddCallback(CMOCK_psa_cipher_set_iv_CALLBACK Callback);
void psa_cipher_set_iv_Stub(CMOCK_psa_cipher_set_iv_CALLBACK Callback);
#define psa_cipher_set_iv_StubWithCallback psa_cipher_set_iv_Stub
#define psa_cipher_update_IgnoreAndReturn(cmock_retval) psa_cipher_update_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_update_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_update_StopIgnore() psa_cipher_update_CMockStopIgnore()
void psa_cipher_update_CMockStopIgnore(void);
#define psa_cipher_update_ExpectAndReturn(operation, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_update_CALLBACK)(psa_cipher_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_cipher_update_AddCallback(CMOCK_psa_cipher_update_CALLBACK Callback);
void psa_cipher_update_Stub(CMOCK_psa_cipher_update_CALLBACK Callback);
#define psa_cipher_update_StubWithCallback psa_cipher_update_Stub
#define psa_cipher_finish_IgnoreAndReturn(cmock_retval) psa_cipher_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_finish_StopIgnore() psa_cipher_finish_CMockStopIgnore()
void psa_cipher_finish_CMockStopIgnore(void);
#define psa_cipher_finish_ExpectAndReturn(operation, output, output_size, output_length, cmock_retval) psa_cipher_finish_CMockExpectAndReturn(__LINE__, operation, output, output_size, output_length, cmock_retval)
void psa_cipher_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_finish_CALLBACK)(psa_cipher_operation_t* operation, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_cipher_finish_AddCallback(CMOCK_psa_cipher_finish_CALLBACK Callback);
void psa_cipher_finish_Stub(CMOCK_psa_cipher_finish_CALLBACK Callback);
#define psa_cipher_finish_StubWithCallback psa_cipher_finish_Stub
#define psa_cipher_abort_IgnoreAndReturn(cmock_retval) psa_cipher_abort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_cipher_abort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_cipher_abort_StopIgnore() psa_cipher_abort_CMockStopIgnore()
void psa_cipher_abort_CMockStopIgnore(void);
#define psa_cipher_abort_ExpectAndReturn(operation, cmock_retval) psa_cipher_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_cipher_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_cipher_abort_CALLBACK)(psa_cipher_operation_t* operation, int cmock_num_calls);
void psa_cipher_abort_AddCallback(CMOCK_psa_cipher_abort_CALLBACK Callback);
void psa_cipher_abort_Stub(CMOCK_psa_cipher_abort_CALLBACK Callback);
#define psa_cipher_abort_StubWithCallback psa_cipher_abort_Stub
#define psa_aead_encrypt_IgnoreAndReturn(cmock_retval) psa_aead_encrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_encrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_encrypt_StopIgnore() psa_aead_encrypt_CMockStopIgnore()
void psa_aead_encrypt_CMockStopIgnore(void);
#define psa_aead_encrypt_ExpectAndReturn(key, alg, nonce, nonce_length, additional_data, additional_data_length, plaintext, plaintext_length, ciphertext, ciphertext_size, ciphertext_length, cmock_retval) psa_aead_encrypt_CMockExpectAndReturn(__LINE__, key, alg, nonce, nonce_length, additional_data, additional_data_length, plaintext, plaintext_length, ciphertext, ciphertext_size, ciphertext_length, cmock_retval)
void psa_aead_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* plaintext, size_t plaintext_length, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_encrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* plaintext, size_t plaintext_length, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, int cmock_num_calls);
void psa_aead_encrypt_AddCallback(CMOCK_psa_aead_encrypt_CALLBACK Callback);
void psa_aead_encrypt_Stub(CMOCK_psa_aead_encrypt_CALLBACK Callback);
#define psa_aead_encrypt_StubWithCallback psa_aead_encrypt_Stub
#define psa_aead_decrypt_IgnoreAndReturn(cmock_retval) psa_aead_decrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_decrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_decrypt_StopIgnore() psa_aead_decrypt_CMockStopIgnore()
void psa_aead_decrypt_CMockStopIgnore(void);
#define psa_aead_decrypt_ExpectAndReturn(key, alg, nonce, nonce_length, additional_data, additional_data_length, ciphertext, ciphertext_length, plaintext, plaintext_size, plaintext_length, cmock_retval) psa_aead_decrypt_CMockExpectAndReturn(__LINE__, key, alg, nonce, nonce_length, additional_data, additional_data_length, ciphertext, ciphertext_length, plaintext, plaintext_size, plaintext_length, cmock_retval)
void psa_aead_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* ciphertext, size_t ciphertext_length, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_decrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* ciphertext, size_t ciphertext_length, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, int cmock_num_calls);
void psa_aead_decrypt_AddCallback(CMOCK_psa_aead_decrypt_CALLBACK Callback);
void psa_aead_decrypt_Stub(CMOCK_psa_aead_decrypt_CALLBACK Callback);
#define psa_aead_decrypt_StubWithCallback psa_aead_decrypt_Stub
#define psa_aead_operation_init_IgnoreAndReturn(cmock_retval) psa_aead_operation_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_operation_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t cmock_to_return);
#define psa_aead_operation_init_StopIgnore() psa_aead_operation_init_CMockStopIgnore()
void psa_aead_operation_init_CMockStopIgnore(void);
#define psa_aead_operation_init_ExpectAndReturn(cmock_retval) psa_aead_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_aead_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t cmock_to_return);
typedef psa_aead_operation_t (* CMOCK_psa_aead_operation_init_CALLBACK)(int cmock_num_calls);
void psa_aead_operation_init_AddCallback(CMOCK_psa_aead_operation_init_CALLBACK Callback);
void psa_aead_operation_init_Stub(CMOCK_psa_aead_operation_init_CALLBACK Callback);
#define psa_aead_operation_init_StubWithCallback psa_aead_operation_init_Stub
#define psa_aead_encrypt_setup_IgnoreAndReturn(cmock_retval) psa_aead_encrypt_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_encrypt_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_encrypt_setup_StopIgnore() psa_aead_encrypt_setup_CMockStopIgnore()
void psa_aead_encrypt_setup_CMockStopIgnore(void);
#define psa_aead_encrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_aead_encrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_aead_encrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_encrypt_setup_CALLBACK)(psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_aead_encrypt_setup_AddCallback(CMOCK_psa_aead_encrypt_setup_CALLBACK Callback);
void psa_aead_encrypt_setup_Stub(CMOCK_psa_aead_encrypt_setup_CALLBACK Callback);
#define psa_aead_encrypt_setup_StubWithCallback psa_aead_encrypt_setup_Stub
#define psa_aead_decrypt_setup_IgnoreAndReturn(cmock_retval) psa_aead_decrypt_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_decrypt_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_decrypt_setup_StopIgnore() psa_aead_decrypt_setup_CMockStopIgnore()
void psa_aead_decrypt_setup_CMockStopIgnore(void);
#define psa_aead_decrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_aead_decrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_aead_decrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_decrypt_setup_CALLBACK)(psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, int cmock_num_calls);
void psa_aead_decrypt_setup_AddCallback(CMOCK_psa_aead_decrypt_setup_CALLBACK Callback);
void psa_aead_decrypt_setup_Stub(CMOCK_psa_aead_decrypt_setup_CALLBACK Callback);
#define psa_aead_decrypt_setup_StubWithCallback psa_aead_decrypt_setup_Stub
#define psa_aead_generate_nonce_IgnoreAndReturn(cmock_retval) psa_aead_generate_nonce_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_generate_nonce_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_generate_nonce_StopIgnore() psa_aead_generate_nonce_CMockStopIgnore()
void psa_aead_generate_nonce_CMockStopIgnore(void);
#define psa_aead_generate_nonce_ExpectAndReturn(operation, nonce, nonce_size, nonce_length, cmock_retval) psa_aead_generate_nonce_CMockExpectAndReturn(__LINE__, operation, nonce, nonce_size, nonce_length, cmock_retval)
void psa_aead_generate_nonce_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* nonce, size_t nonce_size, size_t* nonce_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_generate_nonce_CALLBACK)(psa_aead_operation_t* operation, uint8_t* nonce, size_t nonce_size, size_t* nonce_length, int cmock_num_calls);
void psa_aead_generate_nonce_AddCallback(CMOCK_psa_aead_generate_nonce_CALLBACK Callback);
void psa_aead_generate_nonce_Stub(CMOCK_psa_aead_generate_nonce_CALLBACK Callback);
#define psa_aead_generate_nonce_StubWithCallback psa_aead_generate_nonce_Stub
#define psa_aead_set_nonce_IgnoreAndReturn(cmock_retval) psa_aead_set_nonce_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_set_nonce_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_set_nonce_StopIgnore() psa_aead_set_nonce_CMockStopIgnore()
void psa_aead_set_nonce_CMockStopIgnore(void);
#define psa_aead_set_nonce_ExpectAndReturn(operation, nonce, nonce_length, cmock_retval) psa_aead_set_nonce_CMockExpectAndReturn(__LINE__, operation, nonce, nonce_length, cmock_retval)
void psa_aead_set_nonce_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* nonce, size_t nonce_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_set_nonce_CALLBACK)(psa_aead_operation_t* operation, const uint8_t* nonce, size_t nonce_length, int cmock_num_calls);
void psa_aead_set_nonce_AddCallback(CMOCK_psa_aead_set_nonce_CALLBACK Callback);
void psa_aead_set_nonce_Stub(CMOCK_psa_aead_set_nonce_CALLBACK Callback);
#define psa_aead_set_nonce_StubWithCallback psa_aead_set_nonce_Stub
#define psa_aead_set_lengths_IgnoreAndReturn(cmock_retval) psa_aead_set_lengths_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_set_lengths_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_set_lengths_StopIgnore() psa_aead_set_lengths_CMockStopIgnore()
void psa_aead_set_lengths_CMockStopIgnore(void);
#define psa_aead_set_lengths_ExpectAndReturn(operation, ad_length, plaintext_length, cmock_retval) psa_aead_set_lengths_CMockExpectAndReturn(__LINE__, operation, ad_length, plaintext_length, cmock_retval)
void psa_aead_set_lengths_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, size_t ad_length, size_t plaintext_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_set_lengths_CALLBACK)(psa_aead_operation_t* operation, size_t ad_length, size_t plaintext_length, int cmock_num_calls);
void psa_aead_set_lengths_AddCallback(CMOCK_psa_aead_set_lengths_CALLBACK Callback);
void psa_aead_set_lengths_Stub(CMOCK_psa_aead_set_lengths_CALLBACK Callback);
#define psa_aead_set_lengths_StubWithCallback psa_aead_set_lengths_Stub
#define psa_aead_update_ad_IgnoreAndReturn(cmock_retval) psa_aead_update_ad_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_update_ad_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_update_ad_StopIgnore() psa_aead_update_ad_CMockStopIgnore()
void psa_aead_update_ad_CMockStopIgnore(void);
#define psa_aead_update_ad_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_aead_update_ad_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_aead_update_ad_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_update_ad_CALLBACK)(psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, int cmock_num_calls);
void psa_aead_update_ad_AddCallback(CMOCK_psa_aead_update_ad_CALLBACK Callback);
void psa_aead_update_ad_Stub(CMOCK_psa_aead_update_ad_CALLBACK Callback);
#define psa_aead_update_ad_StubWithCallback psa_aead_update_ad_Stub
#define psa_aead_update_IgnoreAndReturn(cmock_retval) psa_aead_update_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_update_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_update_StopIgnore() psa_aead_update_CMockStopIgnore()
void psa_aead_update_CMockStopIgnore(void);
#define psa_aead_update_ExpectAndReturn(operation, input, input_length, output, output_size, output_length, cmock_retval) psa_aead_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, output, output_size, output_length, cmock_retval)
void psa_aead_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_update_CALLBACK)(psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_aead_update_AddCallback(CMOCK_psa_aead_update_CALLBACK Callback);
void psa_aead_update_Stub(CMOCK_psa_aead_update_CALLBACK Callback);
#define psa_aead_update_StubWithCallback psa_aead_update_Stub
#define psa_aead_finish_IgnoreAndReturn(cmock_retval) psa_aead_finish_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_finish_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_finish_StopIgnore() psa_aead_finish_CMockStopIgnore()
void psa_aead_finish_CMockStopIgnore(void);
#define psa_aead_finish_ExpectAndReturn(operation, ciphertext, ciphertext_size, ciphertext_length, tag, tag_size, tag_length, cmock_retval) psa_aead_finish_CMockExpectAndReturn(__LINE__, operation, ciphertext, ciphertext_size, ciphertext_length, tag, tag_size, tag_length, cmock_retval)
void psa_aead_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, uint8_t* tag, size_t tag_size, size_t* tag_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_finish_CALLBACK)(psa_aead_operation_t* operation, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, uint8_t* tag, size_t tag_size, size_t* tag_length, int cmock_num_calls);
void psa_aead_finish_AddCallback(CMOCK_psa_aead_finish_CALLBACK Callback);
void psa_aead_finish_Stub(CMOCK_psa_aead_finish_CALLBACK Callback);
#define psa_aead_finish_StubWithCallback psa_aead_finish_Stub
#define psa_aead_verify_IgnoreAndReturn(cmock_retval) psa_aead_verify_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_verify_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_verify_StopIgnore() psa_aead_verify_CMockStopIgnore()
void psa_aead_verify_CMockStopIgnore(void);
#define psa_aead_verify_ExpectAndReturn(operation, plaintext, plaintext_size, plaintext_length, tag, tag_length, cmock_retval) psa_aead_verify_CMockExpectAndReturn(__LINE__, operation, plaintext, plaintext_size, plaintext_length, tag, tag_length, cmock_retval)
void psa_aead_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, const uint8_t* tag, size_t tag_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_verify_CALLBACK)(psa_aead_operation_t* operation, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, const uint8_t* tag, size_t tag_length, int cmock_num_calls);
void psa_aead_verify_AddCallback(CMOCK_psa_aead_verify_CALLBACK Callback);
void psa_aead_verify_Stub(CMOCK_psa_aead_verify_CALLBACK Callback);
#define psa_aead_verify_StubWithCallback psa_aead_verify_Stub
#define psa_aead_abort_IgnoreAndReturn(cmock_retval) psa_aead_abort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_aead_abort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_aead_abort_StopIgnore() psa_aead_abort_CMockStopIgnore()
void psa_aead_abort_CMockStopIgnore(void);
#define psa_aead_abort_ExpectAndReturn(operation, cmock_retval) psa_aead_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_aead_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_aead_abort_CALLBACK)(psa_aead_operation_t* operation, int cmock_num_calls);
void psa_aead_abort_AddCallback(CMOCK_psa_aead_abort_CALLBACK Callback);
void psa_aead_abort_Stub(CMOCK_psa_aead_abort_CALLBACK Callback);
#define psa_aead_abort_StubWithCallback psa_aead_abort_Stub
#define psa_sign_message_IgnoreAndReturn(cmock_retval) psa_sign_message_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_sign_message_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_sign_message_StopIgnore() psa_sign_message_CMockStopIgnore()
void psa_sign_message_CMockStopIgnore(void);
#define psa_sign_message_ExpectAndReturn(key, alg, input, input_length, signature, signature_size, signature_length, cmock_retval) psa_sign_message_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, signature, signature_size, signature_length, cmock_retval)
void psa_sign_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* signature, size_t signature_size, size_t* signature_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_sign_message_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* signature, size_t signature_size, size_t* signature_length, int cmock_num_calls);
void psa_sign_message_AddCallback(CMOCK_psa_sign_message_CALLBACK Callback);
void psa_sign_message_Stub(CMOCK_psa_sign_message_CALLBACK Callback);
#define psa_sign_message_StubWithCallback psa_sign_message_Stub
#define psa_verify_message_IgnoreAndReturn(cmock_retval) psa_verify_message_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_verify_message_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_verify_message_StopIgnore() psa_verify_message_CMockStopIgnore()
void psa_verify_message_CMockStopIgnore(void);
#define psa_verify_message_ExpectAndReturn(key, alg, input, input_length, signature, signature_length, cmock_retval) psa_verify_message_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, signature, signature_length, cmock_retval)
void psa_verify_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* signature, size_t signature_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_verify_message_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* signature, size_t signature_length, int cmock_num_calls);
void psa_verify_message_AddCallback(CMOCK_psa_verify_message_CALLBACK Callback);
void psa_verify_message_Stub(CMOCK_psa_verify_message_CALLBACK Callback);
#define psa_verify_message_StubWithCallback psa_verify_message_Stub
#define psa_sign_hash_IgnoreAndReturn(cmock_retval) psa_sign_hash_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_sign_hash_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_sign_hash_StopIgnore() psa_sign_hash_CMockStopIgnore()
void psa_sign_hash_CMockStopIgnore(void);
#define psa_sign_hash_ExpectAndReturn(key, alg, hash, hash_length, signature, signature_size, signature_length, cmock_retval) psa_sign_hash_CMockExpectAndReturn(__LINE__, key, alg, hash, hash_length, signature, signature_size, signature_length, cmock_retval)
void psa_sign_hash_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, uint8_t* signature, size_t signature_size, size_t* signature_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_sign_hash_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, uint8_t* signature, size_t signature_size, size_t* signature_length, int cmock_num_calls);
void psa_sign_hash_AddCallback(CMOCK_psa_sign_hash_CALLBACK Callback);
void psa_sign_hash_Stub(CMOCK_psa_sign_hash_CALLBACK Callback);
#define psa_sign_hash_StubWithCallback psa_sign_hash_Stub
#define psa_verify_hash_IgnoreAndReturn(cmock_retval) psa_verify_hash_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_verify_hash_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_verify_hash_StopIgnore() psa_verify_hash_CMockStopIgnore()
void psa_verify_hash_CMockStopIgnore(void);
#define psa_verify_hash_ExpectAndReturn(key, alg, hash, hash_length, signature, signature_length, cmock_retval) psa_verify_hash_CMockExpectAndReturn(__LINE__, key, alg, hash, hash_length, signature, signature_length, cmock_retval)
void psa_verify_hash_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, const uint8_t* signature, size_t signature_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_verify_hash_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, const uint8_t* signature, size_t signature_length, int cmock_num_calls);
void psa_verify_hash_AddCallback(CMOCK_psa_verify_hash_CALLBACK Callback);
void psa_verify_hash_Stub(CMOCK_psa_verify_hash_CALLBACK Callback);
#define psa_verify_hash_StubWithCallback psa_verify_hash_Stub
#define psa_asymmetric_encrypt_IgnoreAndReturn(cmock_retval) psa_asymmetric_encrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_asymmetric_encrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_asymmetric_encrypt_StopIgnore() psa_asymmetric_encrypt_CMockStopIgnore()
void psa_asymmetric_encrypt_CMockStopIgnore(void);
#define psa_asymmetric_encrypt_ExpectAndReturn(key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval) psa_asymmetric_encrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval)
void psa_asymmetric_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_asymmetric_encrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_asymmetric_encrypt_AddCallback(CMOCK_psa_asymmetric_encrypt_CALLBACK Callback);
void psa_asymmetric_encrypt_Stub(CMOCK_psa_asymmetric_encrypt_CALLBACK Callback);
#define psa_asymmetric_encrypt_StubWithCallback psa_asymmetric_encrypt_Stub
#define psa_asymmetric_decrypt_IgnoreAndReturn(cmock_retval) psa_asymmetric_decrypt_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_asymmetric_decrypt_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_asymmetric_decrypt_StopIgnore() psa_asymmetric_decrypt_CMockStopIgnore()
void psa_asymmetric_decrypt_CMockStopIgnore(void);
#define psa_asymmetric_decrypt_ExpectAndReturn(key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval) psa_asymmetric_decrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval)
void psa_asymmetric_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_asymmetric_decrypt_CALLBACK)(psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_asymmetric_decrypt_AddCallback(CMOCK_psa_asymmetric_decrypt_CALLBACK Callback);
void psa_asymmetric_decrypt_Stub(CMOCK_psa_asymmetric_decrypt_CALLBACK Callback);
#define psa_asymmetric_decrypt_StubWithCallback psa_asymmetric_decrypt_Stub
#define psa_key_derivation_operation_init_IgnoreAndReturn(cmock_retval) psa_key_derivation_operation_init_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_operation_init_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t cmock_to_return);
#define psa_key_derivation_operation_init_StopIgnore() psa_key_derivation_operation_init_CMockStopIgnore()
void psa_key_derivation_operation_init_CMockStopIgnore(void);
#define psa_key_derivation_operation_init_ExpectAndReturn(cmock_retval) psa_key_derivation_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t cmock_to_return);
typedef psa_key_derivation_operation_t (* CMOCK_psa_key_derivation_operation_init_CALLBACK)(int cmock_num_calls);
void psa_key_derivation_operation_init_AddCallback(CMOCK_psa_key_derivation_operation_init_CALLBACK Callback);
void psa_key_derivation_operation_init_Stub(CMOCK_psa_key_derivation_operation_init_CALLBACK Callback);
#define psa_key_derivation_operation_init_StubWithCallback psa_key_derivation_operation_init_Stub
#define psa_key_derivation_setup_IgnoreAndReturn(cmock_retval) psa_key_derivation_setup_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_setup_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_setup_StopIgnore() psa_key_derivation_setup_CMockStopIgnore()
void psa_key_derivation_setup_CMockStopIgnore(void);
#define psa_key_derivation_setup_ExpectAndReturn(operation, alg, cmock_retval) psa_key_derivation_setup_CMockExpectAndReturn(__LINE__, operation, alg, cmock_retval)
void psa_key_derivation_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_algorithm_t alg, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_setup_CALLBACK)(psa_key_derivation_operation_t* operation, psa_algorithm_t alg, int cmock_num_calls);
void psa_key_derivation_setup_AddCallback(CMOCK_psa_key_derivation_setup_CALLBACK Callback);
void psa_key_derivation_setup_Stub(CMOCK_psa_key_derivation_setup_CALLBACK Callback);
#define psa_key_derivation_setup_StubWithCallback psa_key_derivation_setup_Stub
#define psa_key_derivation_get_capacity_IgnoreAndReturn(cmock_retval) psa_key_derivation_get_capacity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_get_capacity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_get_capacity_StopIgnore() psa_key_derivation_get_capacity_CMockStopIgnore()
void psa_key_derivation_get_capacity_CMockStopIgnore(void);
#define psa_key_derivation_get_capacity_ExpectAndReturn(operation, capacity, cmock_retval) psa_key_derivation_get_capacity_CMockExpectAndReturn(__LINE__, operation, capacity, cmock_retval)
void psa_key_derivation_get_capacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_derivation_operation_t* operation, size_t* capacity, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_get_capacity_CALLBACK)(const psa_key_derivation_operation_t* operation, size_t* capacity, int cmock_num_calls);
void psa_key_derivation_get_capacity_AddCallback(CMOCK_psa_key_derivation_get_capacity_CALLBACK Callback);
void psa_key_derivation_get_capacity_Stub(CMOCK_psa_key_derivation_get_capacity_CALLBACK Callback);
#define psa_key_derivation_get_capacity_StubWithCallback psa_key_derivation_get_capacity_Stub
#define psa_key_derivation_set_capacity_IgnoreAndReturn(cmock_retval) psa_key_derivation_set_capacity_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_set_capacity_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_set_capacity_StopIgnore() psa_key_derivation_set_capacity_CMockStopIgnore()
void psa_key_derivation_set_capacity_CMockStopIgnore(void);
#define psa_key_derivation_set_capacity_ExpectAndReturn(operation, capacity, cmock_retval) psa_key_derivation_set_capacity_CMockExpectAndReturn(__LINE__, operation, capacity, cmock_retval)
void psa_key_derivation_set_capacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, size_t capacity, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_set_capacity_CALLBACK)(psa_key_derivation_operation_t* operation, size_t capacity, int cmock_num_calls);
void psa_key_derivation_set_capacity_AddCallback(CMOCK_psa_key_derivation_set_capacity_CALLBACK Callback);
void psa_key_derivation_set_capacity_Stub(CMOCK_psa_key_derivation_set_capacity_CALLBACK Callback);
#define psa_key_derivation_set_capacity_StubWithCallback psa_key_derivation_set_capacity_Stub
#define psa_key_derivation_input_bytes_IgnoreAndReturn(cmock_retval) psa_key_derivation_input_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_input_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_input_bytes_StopIgnore() psa_key_derivation_input_bytes_CMockStopIgnore()
void psa_key_derivation_input_bytes_CMockStopIgnore(void);
#define psa_key_derivation_input_bytes_ExpectAndReturn(operation, step, data, data_length, cmock_retval) psa_key_derivation_input_bytes_CMockExpectAndReturn(__LINE__, operation, step, data, data_length, cmock_retval)
void psa_key_derivation_input_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, const uint8_t* data, size_t data_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_input_bytes_CALLBACK)(psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, const uint8_t* data, size_t data_length, int cmock_num_calls);
void psa_key_derivation_input_bytes_AddCallback(CMOCK_psa_key_derivation_input_bytes_CALLBACK Callback);
void psa_key_derivation_input_bytes_Stub(CMOCK_psa_key_derivation_input_bytes_CALLBACK Callback);
#define psa_key_derivation_input_bytes_StubWithCallback psa_key_derivation_input_bytes_Stub
#define psa_key_derivation_input_integer_IgnoreAndReturn(cmock_retval) psa_key_derivation_input_integer_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_input_integer_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_input_integer_StopIgnore() psa_key_derivation_input_integer_CMockStopIgnore()
void psa_key_derivation_input_integer_CMockStopIgnore(void);
#define psa_key_derivation_input_integer_ExpectAndReturn(operation, step, value, cmock_retval) psa_key_derivation_input_integer_CMockExpectAndReturn(__LINE__, operation, step, value, cmock_retval)
void psa_key_derivation_input_integer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, uint64_t value, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_input_integer_CALLBACK)(psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, uint64_t value, int cmock_num_calls);
void psa_key_derivation_input_integer_AddCallback(CMOCK_psa_key_derivation_input_integer_CALLBACK Callback);
void psa_key_derivation_input_integer_Stub(CMOCK_psa_key_derivation_input_integer_CALLBACK Callback);
#define psa_key_derivation_input_integer_StubWithCallback psa_key_derivation_input_integer_Stub
#define psa_key_derivation_input_key_IgnoreAndReturn(cmock_retval) psa_key_derivation_input_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_input_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_input_key_StopIgnore() psa_key_derivation_input_key_CMockStopIgnore()
void psa_key_derivation_input_key_CMockStopIgnore(void);
#define psa_key_derivation_input_key_ExpectAndReturn(operation, step, key, cmock_retval) psa_key_derivation_input_key_CMockExpectAndReturn(__LINE__, operation, step, key, cmock_retval)
void psa_key_derivation_input_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_input_key_CALLBACK)(psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t key, int cmock_num_calls);
void psa_key_derivation_input_key_AddCallback(CMOCK_psa_key_derivation_input_key_CALLBACK Callback);
void psa_key_derivation_input_key_Stub(CMOCK_psa_key_derivation_input_key_CALLBACK Callback);
#define psa_key_derivation_input_key_StubWithCallback psa_key_derivation_input_key_Stub
#define psa_key_derivation_key_agreement_IgnoreAndReturn(cmock_retval) psa_key_derivation_key_agreement_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_key_agreement_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_key_agreement_StopIgnore() psa_key_derivation_key_agreement_CMockStopIgnore()
void psa_key_derivation_key_agreement_CMockStopIgnore(void);
#define psa_key_derivation_key_agreement_ExpectAndReturn(operation, step, private_key, peer_key, peer_key_length, cmock_retval) psa_key_derivation_key_agreement_CMockExpectAndReturn(__LINE__, operation, step, private_key, peer_key, peer_key_length, cmock_retval)
void psa_key_derivation_key_agreement_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_key_agreement_CALLBACK)(psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, int cmock_num_calls);
void psa_key_derivation_key_agreement_AddCallback(CMOCK_psa_key_derivation_key_agreement_CALLBACK Callback);
void psa_key_derivation_key_agreement_Stub(CMOCK_psa_key_derivation_key_agreement_CALLBACK Callback);
#define psa_key_derivation_key_agreement_StubWithCallback psa_key_derivation_key_agreement_Stub
#define psa_key_derivation_output_bytes_IgnoreAndReturn(cmock_retval) psa_key_derivation_output_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_output_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_output_bytes_StopIgnore() psa_key_derivation_output_bytes_CMockStopIgnore()
void psa_key_derivation_output_bytes_CMockStopIgnore(void);
#define psa_key_derivation_output_bytes_ExpectAndReturn(operation, output, output_length, cmock_retval) psa_key_derivation_output_bytes_CMockExpectAndReturn(__LINE__, operation, output, output_length, cmock_retval)
void psa_key_derivation_output_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, uint8_t* output, size_t output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_output_bytes_CALLBACK)(psa_key_derivation_operation_t* operation, uint8_t* output, size_t output_length, int cmock_num_calls);
void psa_key_derivation_output_bytes_AddCallback(CMOCK_psa_key_derivation_output_bytes_CALLBACK Callback);
void psa_key_derivation_output_bytes_Stub(CMOCK_psa_key_derivation_output_bytes_CALLBACK Callback);
#define psa_key_derivation_output_bytes_StubWithCallback psa_key_derivation_output_bytes_Stub
#define psa_key_derivation_output_key_IgnoreAndReturn(cmock_retval) psa_key_derivation_output_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_output_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_output_key_StopIgnore() psa_key_derivation_output_key_CMockStopIgnore()
void psa_key_derivation_output_key_CMockStopIgnore(void);
#define psa_key_derivation_output_key_ExpectAndReturn(attributes, operation, key, cmock_retval) psa_key_derivation_output_key_CMockExpectAndReturn(__LINE__, attributes, operation, key, cmock_retval)
void psa_key_derivation_output_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_derivation_operation_t* operation, psa_key_id_t* key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_output_key_CALLBACK)(const psa_key_attributes_t* attributes, psa_key_derivation_operation_t* operation, psa_key_id_t* key, int cmock_num_calls);
void psa_key_derivation_output_key_AddCallback(CMOCK_psa_key_derivation_output_key_CALLBACK Callback);
void psa_key_derivation_output_key_Stub(CMOCK_psa_key_derivation_output_key_CALLBACK Callback);
#define psa_key_derivation_output_key_StubWithCallback psa_key_derivation_output_key_Stub
#define psa_key_derivation_verify_bytes_IgnoreAndReturn(cmock_retval) psa_key_derivation_verify_bytes_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_verify_bytes_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_verify_bytes_StopIgnore() psa_key_derivation_verify_bytes_CMockStopIgnore()
void psa_key_derivation_verify_bytes_CMockStopIgnore(void);
#define psa_key_derivation_verify_bytes_ExpectAndReturn(operation, expected_output, output_length, cmock_retval) psa_key_derivation_verify_bytes_CMockExpectAndReturn(__LINE__, operation, expected_output, output_length, cmock_retval)
void psa_key_derivation_verify_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, const uint8_t* expected_output, size_t output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_verify_bytes_CALLBACK)(psa_key_derivation_operation_t* operation, const uint8_t* expected_output, size_t output_length, int cmock_num_calls);
void psa_key_derivation_verify_bytes_AddCallback(CMOCK_psa_key_derivation_verify_bytes_CALLBACK Callback);
void psa_key_derivation_verify_bytes_Stub(CMOCK_psa_key_derivation_verify_bytes_CALLBACK Callback);
#define psa_key_derivation_verify_bytes_StubWithCallback psa_key_derivation_verify_bytes_Stub
#define psa_key_derivation_verify_key_IgnoreAndReturn(cmock_retval) psa_key_derivation_verify_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_verify_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_verify_key_StopIgnore() psa_key_derivation_verify_key_CMockStopIgnore()
void psa_key_derivation_verify_key_CMockStopIgnore(void);
#define psa_key_derivation_verify_key_ExpectAndReturn(operation, expected, cmock_retval) psa_key_derivation_verify_key_CMockExpectAndReturn(__LINE__, operation, expected, cmock_retval)
void psa_key_derivation_verify_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_id_t expected, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_verify_key_CALLBACK)(psa_key_derivation_operation_t* operation, psa_key_id_t expected, int cmock_num_calls);
void psa_key_derivation_verify_key_AddCallback(CMOCK_psa_key_derivation_verify_key_CALLBACK Callback);
void psa_key_derivation_verify_key_Stub(CMOCK_psa_key_derivation_verify_key_CALLBACK Callback);
#define psa_key_derivation_verify_key_StubWithCallback psa_key_derivation_verify_key_Stub
#define psa_key_derivation_abort_IgnoreAndReturn(cmock_retval) psa_key_derivation_abort_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_abort_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_derivation_abort_StopIgnore() psa_key_derivation_abort_CMockStopIgnore()
void psa_key_derivation_abort_CMockStopIgnore(void);
#define psa_key_derivation_abort_ExpectAndReturn(operation, cmock_retval) psa_key_derivation_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_key_derivation_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_key_derivation_abort_CALLBACK)(psa_key_derivation_operation_t* operation, int cmock_num_calls);
void psa_key_derivation_abort_AddCallback(CMOCK_psa_key_derivation_abort_CALLBACK Callback);
void psa_key_derivation_abort_Stub(CMOCK_psa_key_derivation_abort_CALLBACK Callback);
#define psa_key_derivation_abort_StubWithCallback psa_key_derivation_abort_Stub
#define psa_raw_key_agreement_IgnoreAndReturn(cmock_retval) psa_raw_key_agreement_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_raw_key_agreement_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_raw_key_agreement_StopIgnore() psa_raw_key_agreement_CMockStopIgnore()
void psa_raw_key_agreement_CMockStopIgnore(void);
#define psa_raw_key_agreement_ExpectAndReturn(alg, private_key, peer_key, peer_key_length, output, output_size, output_length, cmock_retval) psa_raw_key_agreement_CMockExpectAndReturn(__LINE__, alg, private_key, peer_key, peer_key_length, output, output_size, output_length, cmock_retval)
void psa_raw_key_agreement_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_raw_key_agreement_CALLBACK)(psa_algorithm_t alg, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, uint8_t* output, size_t output_size, size_t* output_length, int cmock_num_calls);
void psa_raw_key_agreement_AddCallback(CMOCK_psa_raw_key_agreement_CALLBACK Callback);
void psa_raw_key_agreement_Stub(CMOCK_psa_raw_key_agreement_CALLBACK Callback);
#define psa_raw_key_agreement_StubWithCallback psa_raw_key_agreement_Stub
#define psa_generate_random_IgnoreAndReturn(cmock_retval) psa_generate_random_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_generate_random_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_generate_random_StopIgnore() psa_generate_random_CMockStopIgnore()
void psa_generate_random_CMockStopIgnore(void);
#define psa_generate_random_ExpectAndReturn(output, output_size, cmock_retval) psa_generate_random_CMockExpectAndReturn(__LINE__, output, output_size, cmock_retval)
void psa_generate_random_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* output, size_t output_size, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_generate_random_CALLBACK)(uint8_t* output, size_t output_size, int cmock_num_calls);
void psa_generate_random_AddCallback(CMOCK_psa_generate_random_CALLBACK Callback);
void psa_generate_random_Stub(CMOCK_psa_generate_random_CALLBACK Callback);
#define psa_generate_random_StubWithCallback psa_generate_random_Stub
#define psa_generate_key_IgnoreAndReturn(cmock_retval) psa_generate_key_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void psa_generate_key_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_generate_key_StopIgnore() psa_generate_key_CMockStopIgnore()
void psa_generate_key_CMockStopIgnore(void);
#define psa_generate_key_ExpectAndReturn(attributes, key, cmock_retval) psa_generate_key_CMockExpectAndReturn(__LINE__, attributes, key, cmock_retval)
void psa_generate_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_id_t* key, psa_status_t cmock_to_return);
typedef psa_status_t (* CMOCK_psa_generate_key_CALLBACK)(const psa_key_attributes_t* attributes, psa_key_id_t* key, int cmock_num_calls);
void psa_generate_key_AddCallback(CMOCK_psa_generate_key_CALLBACK Callback);
void psa_generate_key_Stub(CMOCK_psa_generate_key_CALLBACK Callback);
#define psa_generate_key_StubWithCallback psa_generate_key_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
