/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCKCRYPTO_H
#define _MOCKCRYPTO_H

#include "unity.h"
#include "crypto.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void Mockcrypto_Init(void);
void Mockcrypto_Destroy(void);
void Mockcrypto_Verify(void);




#define psa_crypto_init_ExpectAndReturn(cmock_retval) psa_crypto_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_crypto_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_status_t cmock_to_return);
#define psa_key_attributes_init_ExpectAndReturn(cmock_retval) psa_key_attributes_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_key_attributes_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t cmock_to_return);
#define psa_set_key_id_Expect(attributes, key) psa_set_key_id_CMockExpect(__LINE__, attributes, key)
void psa_set_key_id_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_id_t key);
#define psa_set_key_lifetime_Expect(attributes, lifetime) psa_set_key_lifetime_CMockExpect(__LINE__, attributes, lifetime)
void psa_set_key_lifetime_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_lifetime_t lifetime);
#define psa_get_key_id_ExpectAndReturn(attributes, cmock_retval) psa_get_key_id_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_id_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_id_t cmock_to_return);
#define psa_get_key_lifetime_ExpectAndReturn(attributes, cmock_retval) psa_get_key_lifetime_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_lifetime_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_lifetime_t cmock_to_return);
#define psa_set_key_usage_flags_Expect(attributes, usage_flags) psa_set_key_usage_flags_CMockExpect(__LINE__, attributes, usage_flags)
void psa_set_key_usage_flags_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_usage_t usage_flags);
#define psa_get_key_usage_flags_ExpectAndReturn(attributes, cmock_retval) psa_get_key_usage_flags_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_usage_flags_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_usage_t cmock_to_return);
#define psa_set_key_algorithm_Expect(attributes, alg) psa_set_key_algorithm_CMockExpect(__LINE__, attributes, alg)
void psa_set_key_algorithm_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_algorithm_t alg);
#define psa_get_key_algorithm_ExpectAndReturn(attributes, cmock_retval) psa_get_key_algorithm_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_algorithm_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_algorithm_t cmock_to_return);
#define psa_set_key_type_Expect(attributes, type) psa_set_key_type_CMockExpect(__LINE__, attributes, type)
void psa_set_key_type_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, psa_key_type_t type);
#define psa_set_key_bits_Expect(attributes, bits) psa_set_key_bits_CMockExpect(__LINE__, attributes, bits)
void psa_set_key_bits_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes, size_t bits);
#define psa_get_key_type_ExpectAndReturn(attributes, cmock_retval) psa_get_key_type_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_type_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_type_t cmock_to_return);
#define psa_get_key_bits_ExpectAndReturn(attributes, cmock_retval) psa_get_key_bits_CMockExpectAndReturn(__LINE__, attributes, cmock_retval)
void psa_get_key_bits_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, size_t cmock_to_return);
#define psa_get_key_attributes_ExpectAndReturn(key, attributes, cmock_retval) psa_get_key_attributes_CMockExpectAndReturn(__LINE__, key, attributes, cmock_retval)
void psa_get_key_attributes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_key_attributes_t* attributes, psa_status_t cmock_to_return);
#define psa_reset_key_attributes_Expect(attributes) psa_reset_key_attributes_CMockExpect(__LINE__, attributes)
void psa_reset_key_attributes_CMockExpect(UNITY_LINE_TYPE cmock_line, psa_key_attributes_t* attributes);
#define psa_purge_key_ExpectAndReturn(key, cmock_retval) psa_purge_key_CMockExpectAndReturn(__LINE__, key, cmock_retval)
void psa_purge_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_status_t cmock_to_return);
#define psa_copy_key_ExpectAndReturn(source_key, attributes, target_key, cmock_retval) psa_copy_key_CMockExpectAndReturn(__LINE__, source_key, attributes, target_key, cmock_retval)
void psa_copy_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t source_key, const psa_key_attributes_t* attributes, psa_key_id_t* target_key, psa_status_t cmock_to_return);
#define psa_destroy_key_ExpectAndReturn(key, cmock_retval) psa_destroy_key_CMockExpectAndReturn(__LINE__, key, cmock_retval)
void psa_destroy_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_status_t cmock_to_return);
#define psa_import_key_ExpectAndReturn(attributes, data, data_length, key, cmock_retval) psa_import_key_CMockExpectAndReturn(__LINE__, attributes, data, data_length, key, cmock_retval)
void psa_import_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, const uint8_t* data, size_t data_length, psa_key_id_t* key, psa_status_t cmock_to_return);
#define psa_export_key_ExpectAndReturn(key, data, data_size, data_length, cmock_retval) psa_export_key_CMockExpectAndReturn(__LINE__, key, data, data_size, data_length, cmock_retval)
void psa_export_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, psa_status_t cmock_to_return);
#define psa_export_public_key_ExpectAndReturn(key, data, data_size, data_length, cmock_retval) psa_export_public_key_CMockExpectAndReturn(__LINE__, key, data, data_size, data_length, cmock_retval)
void psa_export_public_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, uint8_t* data, size_t data_size, size_t* data_length, psa_status_t cmock_to_return);
#define psa_hash_compute_ExpectAndReturn(alg, input, input_length, hash, hash_size, hash_length, cmock_retval) psa_hash_compute_CMockExpectAndReturn(__LINE__, alg, input, input_length, hash, hash_size, hash_length, cmock_retval)
void psa_hash_compute_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* hash, size_t hash_size, size_t* hash_length, psa_status_t cmock_to_return);
#define psa_hash_compare_ExpectAndReturn(alg, input, input_length, hash, hash_length, cmock_retval) psa_hash_compare_CMockExpectAndReturn(__LINE__, alg, input, input_length, hash, hash_length, cmock_retval)
void psa_hash_compare_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* hash, size_t hash_length, psa_status_t cmock_to_return);
#define psa_hash_operation_init_ExpectAndReturn(cmock_retval) psa_hash_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_hash_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t cmock_to_return);
#define psa_hash_setup_ExpectAndReturn(operation, alg, cmock_retval) psa_hash_setup_CMockExpectAndReturn(__LINE__, operation, alg, cmock_retval)
void psa_hash_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_hash_update_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_hash_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_hash_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
#define psa_hash_finish_ExpectAndReturn(operation, hash, hash_size, hash_length, cmock_retval) psa_hash_finish_CMockExpectAndReturn(__LINE__, operation, hash, hash_size, hash_length, cmock_retval)
void psa_hash_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, uint8_t* hash, size_t hash_size, size_t* hash_length, psa_status_t cmock_to_return);
#define psa_hash_verify_ExpectAndReturn(operation, hash, hash_length, cmock_retval) psa_hash_verify_CMockExpectAndReturn(__LINE__, operation, hash, hash_length, cmock_retval)
void psa_hash_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, const uint8_t* hash, size_t hash_length, psa_status_t cmock_to_return);
#define psa_hash_abort_ExpectAndReturn(operation, cmock_retval) psa_hash_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_hash_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_hash_operation_t* operation, psa_status_t cmock_to_return);
#define psa_hash_clone_ExpectAndReturn(source_operation, target_operation, cmock_retval) psa_hash_clone_CMockExpectAndReturn(__LINE__, source_operation, target_operation, cmock_retval)
void psa_hash_clone_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_hash_operation_t* source_operation, psa_hash_operation_t* target_operation, psa_status_t cmock_to_return);
#define psa_mac_compute_ExpectAndReturn(key, alg, input, input_length, mac, mac_size, mac_length, cmock_retval) psa_mac_compute_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, mac, mac_size, mac_length, cmock_retval)
void psa_mac_compute_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* mac, size_t mac_size, size_t* mac_length, psa_status_t cmock_to_return);
#define psa_mac_verify_ExpectAndReturn(key, alg, input, input_length, mac, mac_length, cmock_retval) psa_mac_verify_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, mac, mac_length, cmock_retval)
void psa_mac_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* mac, size_t mac_length, psa_status_t cmock_to_return);
#define psa_mac_operation_init_ExpectAndReturn(cmock_retval) psa_mac_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_mac_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t cmock_to_return);
#define psa_mac_sign_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_mac_sign_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_mac_sign_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_mac_verify_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_mac_verify_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_mac_verify_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_mac_update_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_mac_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_mac_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
#define psa_mac_sign_finish_ExpectAndReturn(operation, mac, mac_size, mac_length, cmock_retval) psa_mac_sign_finish_CMockExpectAndReturn(__LINE__, operation, mac, mac_size, mac_length, cmock_retval)
void psa_mac_sign_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, uint8_t* mac, size_t mac_size, size_t* mac_length, psa_status_t cmock_to_return);
#define psa_mac_verify_finish_ExpectAndReturn(operation, mac, mac_length, cmock_retval) psa_mac_verify_finish_CMockExpectAndReturn(__LINE__, operation, mac, mac_length, cmock_retval)
void psa_mac_verify_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, const uint8_t* mac, size_t mac_length, psa_status_t cmock_to_return);
#define psa_mac_abort_ExpectAndReturn(operation, cmock_retval) psa_mac_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_mac_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_mac_operation_t* operation, psa_status_t cmock_to_return);
#define psa_cipher_encrypt_ExpectAndReturn(key, alg, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_encrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_cipher_decrypt_ExpectAndReturn(key, alg, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_decrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_cipher_operation_init_ExpectAndReturn(cmock_retval) psa_cipher_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_cipher_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t cmock_to_return);
#define psa_cipher_encrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_cipher_encrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_cipher_encrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_cipher_decrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_cipher_decrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_cipher_decrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_cipher_generate_iv_ExpectAndReturn(operation, iv, iv_size, iv_length, cmock_retval) psa_cipher_generate_iv_CMockExpectAndReturn(__LINE__, operation, iv, iv_size, iv_length, cmock_retval)
void psa_cipher_generate_iv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, uint8_t* iv, size_t iv_size, size_t* iv_length, psa_status_t cmock_to_return);
#define psa_cipher_set_iv_ExpectAndReturn(operation, iv, iv_length, cmock_retval) psa_cipher_set_iv_CMockExpectAndReturn(__LINE__, operation, iv, iv_length, cmock_retval)
void psa_cipher_set_iv_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, const uint8_t* iv, size_t iv_length, psa_status_t cmock_to_return);
#define psa_cipher_update_ExpectAndReturn(operation, input, input_length, output, output_size, output_length, cmock_retval) psa_cipher_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, output, output_size, output_length, cmock_retval)
void psa_cipher_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_cipher_finish_ExpectAndReturn(operation, output, output_size, output_length, cmock_retval) psa_cipher_finish_CMockExpectAndReturn(__LINE__, operation, output, output_size, output_length, cmock_retval)
void psa_cipher_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_cipher_abort_ExpectAndReturn(operation, cmock_retval) psa_cipher_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_cipher_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_cipher_operation_t* operation, psa_status_t cmock_to_return);
#define psa_aead_encrypt_ExpectAndReturn(key, alg, nonce, nonce_length, additional_data, additional_data_length, plaintext, plaintext_length, ciphertext, ciphertext_size, ciphertext_length, cmock_retval) psa_aead_encrypt_CMockExpectAndReturn(__LINE__, key, alg, nonce, nonce_length, additional_data, additional_data_length, plaintext, plaintext_length, ciphertext, ciphertext_size, ciphertext_length, cmock_retval)
void psa_aead_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* plaintext, size_t plaintext_length, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, psa_status_t cmock_to_return);
#define psa_aead_decrypt_ExpectAndReturn(key, alg, nonce, nonce_length, additional_data, additional_data_length, ciphertext, ciphertext_length, plaintext, plaintext_size, plaintext_length, cmock_retval) psa_aead_decrypt_CMockExpectAndReturn(__LINE__, key, alg, nonce, nonce_length, additional_data, additional_data_length, ciphertext, ciphertext_length, plaintext, plaintext_size, plaintext_length, cmock_retval)
void psa_aead_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* nonce, size_t nonce_length, const uint8_t* additional_data, size_t additional_data_length, const uint8_t* ciphertext, size_t ciphertext_length, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, psa_status_t cmock_to_return);
#define psa_aead_operation_init_ExpectAndReturn(cmock_retval) psa_aead_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_aead_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t cmock_to_return);
#define psa_aead_encrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_aead_encrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_aead_encrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_aead_decrypt_setup_ExpectAndReturn(operation, key, alg, cmock_retval) psa_aead_decrypt_setup_CMockExpectAndReturn(__LINE__, operation, key, alg, cmock_retval)
void psa_aead_decrypt_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_key_id_t key, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_aead_generate_nonce_ExpectAndReturn(operation, nonce, nonce_size, nonce_length, cmock_retval) psa_aead_generate_nonce_CMockExpectAndReturn(__LINE__, operation, nonce, nonce_size, nonce_length, cmock_retval)
void psa_aead_generate_nonce_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* nonce, size_t nonce_size, size_t* nonce_length, psa_status_t cmock_to_return);
#define psa_aead_set_nonce_ExpectAndReturn(operation, nonce, nonce_length, cmock_retval) psa_aead_set_nonce_CMockExpectAndReturn(__LINE__, operation, nonce, nonce_length, cmock_retval)
void psa_aead_set_nonce_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* nonce, size_t nonce_length, psa_status_t cmock_to_return);
#define psa_aead_set_lengths_ExpectAndReturn(operation, ad_length, plaintext_length, cmock_retval) psa_aead_set_lengths_CMockExpectAndReturn(__LINE__, operation, ad_length, plaintext_length, cmock_retval)
void psa_aead_set_lengths_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, size_t ad_length, size_t plaintext_length, psa_status_t cmock_to_return);
#define psa_aead_update_ad_ExpectAndReturn(operation, input, input_length, cmock_retval) psa_aead_update_ad_CMockExpectAndReturn(__LINE__, operation, input, input_length, cmock_retval)
void psa_aead_update_ad_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, psa_status_t cmock_to_return);
#define psa_aead_update_ExpectAndReturn(operation, input, input_length, output, output_size, output_length, cmock_retval) psa_aead_update_CMockExpectAndReturn(__LINE__, operation, input, input_length, output, output_size, output_length, cmock_retval)
void psa_aead_update_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, const uint8_t* input, size_t input_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_aead_finish_ExpectAndReturn(operation, ciphertext, ciphertext_size, ciphertext_length, tag, tag_size, tag_length, cmock_retval) psa_aead_finish_CMockExpectAndReturn(__LINE__, operation, ciphertext, ciphertext_size, ciphertext_length, tag, tag_size, tag_length, cmock_retval)
void psa_aead_finish_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* ciphertext, size_t ciphertext_size, size_t* ciphertext_length, uint8_t* tag, size_t tag_size, size_t* tag_length, psa_status_t cmock_to_return);
#define psa_aead_verify_ExpectAndReturn(operation, plaintext, plaintext_size, plaintext_length, tag, tag_length, cmock_retval) psa_aead_verify_CMockExpectAndReturn(__LINE__, operation, plaintext, plaintext_size, plaintext_length, tag, tag_length, cmock_retval)
void psa_aead_verify_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, uint8_t* plaintext, size_t plaintext_size, size_t* plaintext_length, const uint8_t* tag, size_t tag_length, psa_status_t cmock_to_return);
#define psa_aead_abort_ExpectAndReturn(operation, cmock_retval) psa_aead_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_aead_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_aead_operation_t* operation, psa_status_t cmock_to_return);
#define psa_sign_message_ExpectAndReturn(key, alg, input, input_length, signature, signature_size, signature_length, cmock_retval) psa_sign_message_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, signature, signature_size, signature_length, cmock_retval)
void psa_sign_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, uint8_t* signature, size_t signature_size, size_t* signature_length, psa_status_t cmock_to_return);
#define psa_verify_message_ExpectAndReturn(key, alg, input, input_length, signature, signature_length, cmock_retval) psa_verify_message_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, signature, signature_length, cmock_retval)
void psa_verify_message_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* signature, size_t signature_length, psa_status_t cmock_to_return);
#define psa_sign_hash_ExpectAndReturn(key, alg, hash, hash_length, signature, signature_size, signature_length, cmock_retval) psa_sign_hash_CMockExpectAndReturn(__LINE__, key, alg, hash, hash_length, signature, signature_size, signature_length, cmock_retval)
void psa_sign_hash_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, uint8_t* signature, size_t signature_size, size_t* signature_length, psa_status_t cmock_to_return);
#define psa_verify_hash_ExpectAndReturn(key, alg, hash, hash_length, signature, signature_length, cmock_retval) psa_verify_hash_CMockExpectAndReturn(__LINE__, key, alg, hash, hash_length, signature, signature_length, cmock_retval)
void psa_verify_hash_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* hash, size_t hash_length, const uint8_t* signature, size_t signature_length, psa_status_t cmock_to_return);
#define psa_asymmetric_encrypt_ExpectAndReturn(key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval) psa_asymmetric_encrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval)
void psa_asymmetric_encrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_asymmetric_decrypt_ExpectAndReturn(key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval) psa_asymmetric_decrypt_CMockExpectAndReturn(__LINE__, key, alg, input, input_length, salt, salt_length, output, output_size, output_length, cmock_retval)
void psa_asymmetric_decrypt_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_id_t key, psa_algorithm_t alg, const uint8_t* input, size_t input_length, const uint8_t* salt, size_t salt_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_key_derivation_operation_init_ExpectAndReturn(cmock_retval) psa_key_derivation_operation_init_CMockExpectAndReturn(__LINE__, cmock_retval)
void psa_key_derivation_operation_init_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t cmock_to_return);
#define psa_key_derivation_setup_ExpectAndReturn(operation, alg, cmock_retval) psa_key_derivation_setup_CMockExpectAndReturn(__LINE__, operation, alg, cmock_retval)
void psa_key_derivation_setup_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_algorithm_t alg, psa_status_t cmock_to_return);
#define psa_key_derivation_get_capacity_ExpectAndReturn(operation, capacity, cmock_retval) psa_key_derivation_get_capacity_CMockExpectAndReturn(__LINE__, operation, capacity, cmock_retval)
void psa_key_derivation_get_capacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_derivation_operation_t* operation, size_t* capacity, psa_status_t cmock_to_return);
#define psa_key_derivation_set_capacity_ExpectAndReturn(operation, capacity, cmock_retval) psa_key_derivation_set_capacity_CMockExpectAndReturn(__LINE__, operation, capacity, cmock_retval)
void psa_key_derivation_set_capacity_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, size_t capacity, psa_status_t cmock_to_return);
#define psa_key_derivation_input_bytes_ExpectAndReturn(operation, step, data, data_length, cmock_retval) psa_key_derivation_input_bytes_CMockExpectAndReturn(__LINE__, operation, step, data, data_length, cmock_retval)
void psa_key_derivation_input_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, const uint8_t* data, size_t data_length, psa_status_t cmock_to_return);
#define psa_key_derivation_input_integer_ExpectAndReturn(operation, step, value, cmock_retval) psa_key_derivation_input_integer_CMockExpectAndReturn(__LINE__, operation, step, value, cmock_retval)
void psa_key_derivation_input_integer_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, uint64_t value, psa_status_t cmock_to_return);
#define psa_key_derivation_input_key_ExpectAndReturn(operation, step, key, cmock_retval) psa_key_derivation_input_key_CMockExpectAndReturn(__LINE__, operation, step, key, cmock_retval)
void psa_key_derivation_input_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t key, psa_status_t cmock_to_return);
#define psa_key_derivation_key_agreement_ExpectAndReturn(operation, step, private_key, peer_key, peer_key_length, cmock_retval) psa_key_derivation_key_agreement_CMockExpectAndReturn(__LINE__, operation, step, private_key, peer_key, peer_key_length, cmock_retval)
void psa_key_derivation_key_agreement_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_derivation_step_t step, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, psa_status_t cmock_to_return);
#define psa_key_derivation_output_bytes_ExpectAndReturn(operation, output, output_length, cmock_retval) psa_key_derivation_output_bytes_CMockExpectAndReturn(__LINE__, operation, output, output_length, cmock_retval)
void psa_key_derivation_output_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, uint8_t* output, size_t output_length, psa_status_t cmock_to_return);
#define psa_key_derivation_output_key_ExpectAndReturn(attributes, operation, key, cmock_retval) psa_key_derivation_output_key_CMockExpectAndReturn(__LINE__, attributes, operation, key, cmock_retval)
void psa_key_derivation_output_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_derivation_operation_t* operation, psa_key_id_t* key, psa_status_t cmock_to_return);
#define psa_key_derivation_verify_bytes_ExpectAndReturn(operation, expected_output, output_length, cmock_retval) psa_key_derivation_verify_bytes_CMockExpectAndReturn(__LINE__, operation, expected_output, output_length, cmock_retval)
void psa_key_derivation_verify_bytes_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, const uint8_t* expected_output, size_t output_length, psa_status_t cmock_to_return);
#define psa_key_derivation_verify_key_ExpectAndReturn(operation, expected, cmock_retval) psa_key_derivation_verify_key_CMockExpectAndReturn(__LINE__, operation, expected, cmock_retval)
void psa_key_derivation_verify_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_key_id_t expected, psa_status_t cmock_to_return);
#define psa_key_derivation_abort_ExpectAndReturn(operation, cmock_retval) psa_key_derivation_abort_CMockExpectAndReturn(__LINE__, operation, cmock_retval)
void psa_key_derivation_abort_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_key_derivation_operation_t* operation, psa_status_t cmock_to_return);
#define psa_raw_key_agreement_ExpectAndReturn(alg, private_key, peer_key, peer_key_length, output, output_size, output_length, cmock_retval) psa_raw_key_agreement_CMockExpectAndReturn(__LINE__, alg, private_key, peer_key, peer_key_length, output, output_size, output_length, cmock_retval)
void psa_raw_key_agreement_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, psa_algorithm_t alg, psa_key_id_t private_key, const uint8_t* peer_key, size_t peer_key_length, uint8_t* output, size_t output_size, size_t* output_length, psa_status_t cmock_to_return);
#define psa_generate_random_ExpectAndReturn(output, output_size, cmock_retval) psa_generate_random_CMockExpectAndReturn(__LINE__, output, output_size, cmock_retval)
void psa_generate_random_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t* output, size_t output_size, psa_status_t cmock_to_return);
#define psa_generate_key_ExpectAndReturn(attributes, key, cmock_retval) psa_generate_key_CMockExpectAndReturn(__LINE__, attributes, key, cmock_retval)
void psa_generate_key_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, const psa_key_attributes_t* attributes, psa_key_id_t* key, psa_status_t cmock_to_return);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
